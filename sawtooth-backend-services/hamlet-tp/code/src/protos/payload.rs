// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionPayload {
    // message fields
    pub payload_type: TransactionPayload_PayloadType,
    pub timestamp: u64,
    pub create_account: ::protobuf::SingularPtrField<CreateAccount>,
    pub create_asset: ::protobuf::SingularPtrField<CreateAsset>,
    pub create_holding: ::protobuf::SingularPtrField<CreateHolding>,
    pub create_offer: ::protobuf::SingularPtrField<CreateOffer>,
    pub accept_offer: ::protobuf::SingularPtrField<AcceptOffer>,
    pub close_offer: ::protobuf::SingularPtrField<CloseOffer>,
    pub create_record: ::protobuf::SingularPtrField<CreateRecord>,
    pub finalize_record: ::protobuf::SingularPtrField<FinalizeRecord>,
    pub create_record_type: ::protobuf::SingularPtrField<CreateRecordType>,
    pub update_properties: ::protobuf::SingularPtrField<UpdateProperties>,
    pub create_proposal: ::protobuf::SingularPtrField<CreateProposal>,
    pub answer_proposal: ::protobuf::SingularPtrField<AnswerProposal>,
    pub revoke_reporter: ::protobuf::SingularPtrField<RevokeReporter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TransactionPayload {
    pub fn new() -> TransactionPayload {
        ::std::default::Default::default()
    }

    // .TransactionPayload.PayloadType payload_type = 1;

    pub fn clear_payload_type(&mut self) {
        self.payload_type = TransactionPayload_PayloadType::TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_payload_type(&mut self, v: TransactionPayload_PayloadType) {
        self.payload_type = v;
    }

    pub fn get_payload_type(&self) -> TransactionPayload_PayloadType {
        self.payload_type
    }

    // uint64 timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // .CreateAccount create_account = 3;

    pub fn clear_create_account(&mut self) {
        self.create_account.clear();
    }

    pub fn has_create_account(&self) -> bool {
        self.create_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_account(&mut self, v: CreateAccount) {
        self.create_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_account(&mut self) -> &mut CreateAccount {
        if self.create_account.is_none() {
            self.create_account.set_default();
        }
        self.create_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_account(&mut self) -> CreateAccount {
        self.create_account.take().unwrap_or_else(|| CreateAccount::new())
    }

    pub fn get_create_account(&self) -> &CreateAccount {
        self.create_account.as_ref().unwrap_or_else(|| CreateAccount::default_instance())
    }

    // .CreateAsset create_asset = 4;

    pub fn clear_create_asset(&mut self) {
        self.create_asset.clear();
    }

    pub fn has_create_asset(&self) -> bool {
        self.create_asset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_asset(&mut self, v: CreateAsset) {
        self.create_asset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_asset(&mut self) -> &mut CreateAsset {
        if self.create_asset.is_none() {
            self.create_asset.set_default();
        }
        self.create_asset.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_asset(&mut self) -> CreateAsset {
        self.create_asset.take().unwrap_or_else(|| CreateAsset::new())
    }

    pub fn get_create_asset(&self) -> &CreateAsset {
        self.create_asset.as_ref().unwrap_or_else(|| CreateAsset::default_instance())
    }

    // .CreateHolding create_holding = 5;

    pub fn clear_create_holding(&mut self) {
        self.create_holding.clear();
    }

    pub fn has_create_holding(&self) -> bool {
        self.create_holding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_holding(&mut self, v: CreateHolding) {
        self.create_holding = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_holding(&mut self) -> &mut CreateHolding {
        if self.create_holding.is_none() {
            self.create_holding.set_default();
        }
        self.create_holding.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_holding(&mut self) -> CreateHolding {
        self.create_holding.take().unwrap_or_else(|| CreateHolding::new())
    }

    pub fn get_create_holding(&self) -> &CreateHolding {
        self.create_holding.as_ref().unwrap_or_else(|| CreateHolding::default_instance())
    }

    // .CreateOffer create_offer = 6;

    pub fn clear_create_offer(&mut self) {
        self.create_offer.clear();
    }

    pub fn has_create_offer(&self) -> bool {
        self.create_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_offer(&mut self, v: CreateOffer) {
        self.create_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_offer(&mut self) -> &mut CreateOffer {
        if self.create_offer.is_none() {
            self.create_offer.set_default();
        }
        self.create_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_offer(&mut self) -> CreateOffer {
        self.create_offer.take().unwrap_or_else(|| CreateOffer::new())
    }

    pub fn get_create_offer(&self) -> &CreateOffer {
        self.create_offer.as_ref().unwrap_or_else(|| CreateOffer::default_instance())
    }

    // .AcceptOffer accept_offer = 10;

    pub fn clear_accept_offer(&mut self) {
        self.accept_offer.clear();
    }

    pub fn has_accept_offer(&self) -> bool {
        self.accept_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accept_offer(&mut self, v: AcceptOffer) {
        self.accept_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accept_offer(&mut self) -> &mut AcceptOffer {
        if self.accept_offer.is_none() {
            self.accept_offer.set_default();
        }
        self.accept_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_accept_offer(&mut self) -> AcceptOffer {
        self.accept_offer.take().unwrap_or_else(|| AcceptOffer::new())
    }

    pub fn get_accept_offer(&self) -> &AcceptOffer {
        self.accept_offer.as_ref().unwrap_or_else(|| AcceptOffer::default_instance())
    }

    // .CloseOffer close_offer = 11;

    pub fn clear_close_offer(&mut self) {
        self.close_offer.clear();
    }

    pub fn has_close_offer(&self) -> bool {
        self.close_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_close_offer(&mut self, v: CloseOffer) {
        self.close_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_close_offer(&mut self) -> &mut CloseOffer {
        if self.close_offer.is_none() {
            self.close_offer.set_default();
        }
        self.close_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_close_offer(&mut self) -> CloseOffer {
        self.close_offer.take().unwrap_or_else(|| CloseOffer::new())
    }

    pub fn get_close_offer(&self) -> &CloseOffer {
        self.close_offer.as_ref().unwrap_or_else(|| CloseOffer::default_instance())
    }

    // .CreateRecord create_record = 21;

    pub fn clear_create_record(&mut self) {
        self.create_record.clear();
    }

    pub fn has_create_record(&self) -> bool {
        self.create_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_record(&mut self, v: CreateRecord) {
        self.create_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_record(&mut self) -> &mut CreateRecord {
        if self.create_record.is_none() {
            self.create_record.set_default();
        }
        self.create_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_record(&mut self) -> CreateRecord {
        self.create_record.take().unwrap_or_else(|| CreateRecord::new())
    }

    pub fn get_create_record(&self) -> &CreateRecord {
        self.create_record.as_ref().unwrap_or_else(|| CreateRecord::default_instance())
    }

    // .FinalizeRecord finalize_record = 22;

    pub fn clear_finalize_record(&mut self) {
        self.finalize_record.clear();
    }

    pub fn has_finalize_record(&self) -> bool {
        self.finalize_record.is_some()
    }

    // Param is passed by value, moved
    pub fn set_finalize_record(&mut self, v: FinalizeRecord) {
        self.finalize_record = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_finalize_record(&mut self) -> &mut FinalizeRecord {
        if self.finalize_record.is_none() {
            self.finalize_record.set_default();
        }
        self.finalize_record.as_mut().unwrap()
    }

    // Take field
    pub fn take_finalize_record(&mut self) -> FinalizeRecord {
        self.finalize_record.take().unwrap_or_else(|| FinalizeRecord::new())
    }

    pub fn get_finalize_record(&self) -> &FinalizeRecord {
        self.finalize_record.as_ref().unwrap_or_else(|| FinalizeRecord::default_instance())
    }

    // .CreateRecordType create_record_type = 23;

    pub fn clear_create_record_type(&mut self) {
        self.create_record_type.clear();
    }

    pub fn has_create_record_type(&self) -> bool {
        self.create_record_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_record_type(&mut self, v: CreateRecordType) {
        self.create_record_type = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_record_type(&mut self) -> &mut CreateRecordType {
        if self.create_record_type.is_none() {
            self.create_record_type.set_default();
        }
        self.create_record_type.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_record_type(&mut self) -> CreateRecordType {
        self.create_record_type.take().unwrap_or_else(|| CreateRecordType::new())
    }

    pub fn get_create_record_type(&self) -> &CreateRecordType {
        self.create_record_type.as_ref().unwrap_or_else(|| CreateRecordType::default_instance())
    }

    // .UpdateProperties update_properties = 24;

    pub fn clear_update_properties(&mut self) {
        self.update_properties.clear();
    }

    pub fn has_update_properties(&self) -> bool {
        self.update_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_properties(&mut self, v: UpdateProperties) {
        self.update_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_properties(&mut self) -> &mut UpdateProperties {
        if self.update_properties.is_none() {
            self.update_properties.set_default();
        }
        self.update_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_properties(&mut self) -> UpdateProperties {
        self.update_properties.take().unwrap_or_else(|| UpdateProperties::new())
    }

    pub fn get_update_properties(&self) -> &UpdateProperties {
        self.update_properties.as_ref().unwrap_or_else(|| UpdateProperties::default_instance())
    }

    // .CreateProposal create_proposal = 25;

    pub fn clear_create_proposal(&mut self) {
        self.create_proposal.clear();
    }

    pub fn has_create_proposal(&self) -> bool {
        self.create_proposal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_proposal(&mut self, v: CreateProposal) {
        self.create_proposal = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_proposal(&mut self) -> &mut CreateProposal {
        if self.create_proposal.is_none() {
            self.create_proposal.set_default();
        }
        self.create_proposal.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_proposal(&mut self) -> CreateProposal {
        self.create_proposal.take().unwrap_or_else(|| CreateProposal::new())
    }

    pub fn get_create_proposal(&self) -> &CreateProposal {
        self.create_proposal.as_ref().unwrap_or_else(|| CreateProposal::default_instance())
    }

    // .AnswerProposal answer_proposal = 26;

    pub fn clear_answer_proposal(&mut self) {
        self.answer_proposal.clear();
    }

    pub fn has_answer_proposal(&self) -> bool {
        self.answer_proposal.is_some()
    }

    // Param is passed by value, moved
    pub fn set_answer_proposal(&mut self, v: AnswerProposal) {
        self.answer_proposal = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_answer_proposal(&mut self) -> &mut AnswerProposal {
        if self.answer_proposal.is_none() {
            self.answer_proposal.set_default();
        }
        self.answer_proposal.as_mut().unwrap()
    }

    // Take field
    pub fn take_answer_proposal(&mut self) -> AnswerProposal {
        self.answer_proposal.take().unwrap_or_else(|| AnswerProposal::new())
    }

    pub fn get_answer_proposal(&self) -> &AnswerProposal {
        self.answer_proposal.as_ref().unwrap_or_else(|| AnswerProposal::default_instance())
    }

    // .RevokeReporter revoke_reporter = 27;

    pub fn clear_revoke_reporter(&mut self) {
        self.revoke_reporter.clear();
    }

    pub fn has_revoke_reporter(&self) -> bool {
        self.revoke_reporter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_revoke_reporter(&mut self, v: RevokeReporter) {
        self.revoke_reporter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_revoke_reporter(&mut self) -> &mut RevokeReporter {
        if self.revoke_reporter.is_none() {
            self.revoke_reporter.set_default();
        }
        self.revoke_reporter.as_mut().unwrap()
    }

    // Take field
    pub fn take_revoke_reporter(&mut self) -> RevokeReporter {
        self.revoke_reporter.take().unwrap_or_else(|| RevokeReporter::new())
    }

    pub fn get_revoke_reporter(&self) -> &RevokeReporter {
        self.revoke_reporter.as_ref().unwrap_or_else(|| RevokeReporter::default_instance())
    }
}

impl ::protobuf::Message for TransactionPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.create_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_holding {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accept_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.close_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.finalize_record {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_record_type {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_proposal {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.answer_proposal {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.revoke_reporter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.payload_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_account)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_asset)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_holding)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_offer)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accept_offer)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.close_offer)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_record)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.finalize_record)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_record_type)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_properties)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_proposal)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.answer_proposal)?;
                },
                27 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.revoke_reporter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.payload_type != TransactionPayload_PayloadType::TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.payload_type);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.create_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_holding.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accept_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.close_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_record.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.finalize_record.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_record_type.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_properties.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_proposal.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.answer_proposal.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.revoke_reporter.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.payload_type != TransactionPayload_PayloadType::TYPE_UNSET {
            os.write_enum(1, self.payload_type.value())?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if let Some(ref v) = self.create_account.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_asset.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_holding.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_offer.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accept_offer.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.close_offer.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_record.as_ref() {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.finalize_record.as_ref() {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_record_type.as_ref() {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_properties.as_ref() {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_proposal.as_ref() {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.answer_proposal.as_ref() {
            os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.revoke_reporter.as_ref() {
            os.write_tag(27, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionPayload {
        TransactionPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionPayload_PayloadType>>(
                    "payload_type",
                    |m: &TransactionPayload| { &m.payload_type },
                    |m: &mut TransactionPayload| { &mut m.payload_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &TransactionPayload| { &m.timestamp },
                    |m: &mut TransactionPayload| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAccount>>(
                    "create_account",
                    |m: &TransactionPayload| { &m.create_account },
                    |m: &mut TransactionPayload| { &mut m.create_account },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAsset>>(
                    "create_asset",
                    |m: &TransactionPayload| { &m.create_asset },
                    |m: &mut TransactionPayload| { &mut m.create_asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateHolding>>(
                    "create_holding",
                    |m: &TransactionPayload| { &m.create_holding },
                    |m: &mut TransactionPayload| { &mut m.create_holding },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateOffer>>(
                    "create_offer",
                    |m: &TransactionPayload| { &m.create_offer },
                    |m: &mut TransactionPayload| { &mut m.create_offer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AcceptOffer>>(
                    "accept_offer",
                    |m: &TransactionPayload| { &m.accept_offer },
                    |m: &mut TransactionPayload| { &mut m.accept_offer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CloseOffer>>(
                    "close_offer",
                    |m: &TransactionPayload| { &m.close_offer },
                    |m: &mut TransactionPayload| { &mut m.close_offer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateRecord>>(
                    "create_record",
                    |m: &TransactionPayload| { &m.create_record },
                    |m: &mut TransactionPayload| { &mut m.create_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FinalizeRecord>>(
                    "finalize_record",
                    |m: &TransactionPayload| { &m.finalize_record },
                    |m: &mut TransactionPayload| { &mut m.finalize_record },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateRecordType>>(
                    "create_record_type",
                    |m: &TransactionPayload| { &m.create_record_type },
                    |m: &mut TransactionPayload| { &mut m.create_record_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdateProperties>>(
                    "update_properties",
                    |m: &TransactionPayload| { &m.update_properties },
                    |m: &mut TransactionPayload| { &mut m.update_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateProposal>>(
                    "create_proposal",
                    |m: &TransactionPayload| { &m.create_proposal },
                    |m: &mut TransactionPayload| { &mut m.create_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AnswerProposal>>(
                    "answer_proposal",
                    |m: &TransactionPayload| { &m.answer_proposal },
                    |m: &mut TransactionPayload| { &mut m.answer_proposal },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RevokeReporter>>(
                    "revoke_reporter",
                    |m: &TransactionPayload| { &m.revoke_reporter },
                    |m: &mut TransactionPayload| { &mut m.revoke_reporter },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionPayload>(
                    "TransactionPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionPayload {
        static mut instance: ::protobuf::lazy::Lazy<TransactionPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionPayload,
        };
        unsafe {
            instance.get(TransactionPayload::new)
        }
    }
}

impl ::protobuf::Clear for TransactionPayload {
    fn clear(&mut self) {
        self.clear_payload_type();
        self.clear_timestamp();
        self.clear_create_account();
        self.clear_create_asset();
        self.clear_create_holding();
        self.clear_create_offer();
        self.clear_accept_offer();
        self.clear_close_offer();
        self.clear_create_record();
        self.clear_finalize_record();
        self.clear_create_record_type();
        self.clear_update_properties();
        self.clear_create_proposal();
        self.clear_answer_proposal();
        self.clear_revoke_reporter();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionPayload_PayloadType {
    TYPE_UNSET = 0,
    CREATE_ACCOUNT = 2,
    CREATE_ASSET = 3,
    CREATE_HOLDING = 4,
    CREATE_OFFER = 5,
    ACCEPT_OFFER = 10,
    CLOSE_OFFER = 11,
    CREATE_RECORD = 21,
    FINALIZE_RECORD = 22,
    CREATE_RECORD_TYPE = 23,
    UPDATE_PROPERTIES = 24,
    CREATE_PROPOSAL = 25,
    ANSWER_PROPOSAL = 26,
    REVOKE_REPORTER = 27,
}

impl ::protobuf::ProtobufEnum for TransactionPayload_PayloadType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionPayload_PayloadType> {
        match value {
            0 => ::std::option::Option::Some(TransactionPayload_PayloadType::TYPE_UNSET),
            2 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_ACCOUNT),
            3 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_ASSET),
            4 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_HOLDING),
            5 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_OFFER),
            10 => ::std::option::Option::Some(TransactionPayload_PayloadType::ACCEPT_OFFER),
            11 => ::std::option::Option::Some(TransactionPayload_PayloadType::CLOSE_OFFER),
            21 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_RECORD),
            22 => ::std::option::Option::Some(TransactionPayload_PayloadType::FINALIZE_RECORD),
            23 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_RECORD_TYPE),
            24 => ::std::option::Option::Some(TransactionPayload_PayloadType::UPDATE_PROPERTIES),
            25 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_PROPOSAL),
            26 => ::std::option::Option::Some(TransactionPayload_PayloadType::ANSWER_PROPOSAL),
            27 => ::std::option::Option::Some(TransactionPayload_PayloadType::REVOKE_REPORTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionPayload_PayloadType] = &[
            TransactionPayload_PayloadType::TYPE_UNSET,
            TransactionPayload_PayloadType::CREATE_ACCOUNT,
            TransactionPayload_PayloadType::CREATE_ASSET,
            TransactionPayload_PayloadType::CREATE_HOLDING,
            TransactionPayload_PayloadType::CREATE_OFFER,
            TransactionPayload_PayloadType::ACCEPT_OFFER,
            TransactionPayload_PayloadType::CLOSE_OFFER,
            TransactionPayload_PayloadType::CREATE_RECORD,
            TransactionPayload_PayloadType::FINALIZE_RECORD,
            TransactionPayload_PayloadType::CREATE_RECORD_TYPE,
            TransactionPayload_PayloadType::UPDATE_PROPERTIES,
            TransactionPayload_PayloadType::CREATE_PROPOSAL,
            TransactionPayload_PayloadType::ANSWER_PROPOSAL,
            TransactionPayload_PayloadType::REVOKE_REPORTER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TransactionPayload_PayloadType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TransactionPayload_PayloadType {
}

impl ::std::default::Default for TransactionPayload_PayloadType {
    fn default() -> Self {
        TransactionPayload_PayloadType::TYPE_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionPayload_PayloadType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccount {
    // message fields
    pub label: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAccount {
    pub fn new() -> CreateAccount {
        ::std::default::Default::default()
    }

    // string label = 1;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 2;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }
}

impl ::protobuf::Message for CreateAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccount {
        CreateAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &CreateAccount| { &m.label },
                    |m: &mut CreateAccount| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &CreateAccount| { &m.description },
                    |m: &mut CreateAccount| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAccount>(
                    "CreateAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAccount {
        static mut instance: ::protobuf::lazy::Lazy<CreateAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAccount,
        };
        unsafe {
            instance.get(CreateAccount::new)
        }
    }
}

impl ::protobuf::Clear for CreateAccount {
    fn clear(&mut self) {
        self.clear_label();
        self.clear_description();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAsset {
    // message fields
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    pub rules: ::protobuf::RepeatedField<super::rule::Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAsset {
    pub fn new() -> CreateAsset {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string description = 2;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // repeated .Rule rules = 3;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<super::rule::Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<super::rule::Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<super::rule::Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[super::rule::Rule] {
        &self.rules
    }
}

impl ::protobuf::Message for CreateAsset {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.rules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAsset {
        CreateAsset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CreateAsset| { &m.name },
                    |m: &mut CreateAsset| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &CreateAsset| { &m.description },
                    |m: &mut CreateAsset| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rule::Rule>>(
                    "rules",
                    |m: &CreateAsset| { &m.rules },
                    |m: &mut CreateAsset| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAsset>(
                    "CreateAsset",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAsset {
        static mut instance: ::protobuf::lazy::Lazy<CreateAsset> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAsset,
        };
        unsafe {
            instance.get(CreateAsset::new)
        }
    }
}

impl ::protobuf::Clear for CreateAsset {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_description();
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAsset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateHolding {
    // message fields
    pub id: ::std::string::String,
    pub label: ::std::string::String,
    pub description: ::std::string::String,
    pub asset: ::std::string::String,
    pub quantity: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateHolding {
    pub fn new() -> CreateHolding {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string label = 2;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string asset = 4;

    pub fn clear_asset(&mut self) {
        self.asset.clear();
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: ::std::string::String) {
        self.asset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut ::std::string::String {
        &mut self.asset
    }

    // Take field
    pub fn take_asset(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.asset, ::std::string::String::new())
    }

    pub fn get_asset(&self) -> &str {
        &self.asset
    }

    // sint64 quantity = 5;

    pub fn clear_quantity(&mut self) {
        self.quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: i64) {
        self.quantity = v;
    }

    pub fn get_quantity(&self) -> i64 {
        self.quantity
    }
}

impl ::protobuf::Message for CreateHolding {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.asset)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.quantity = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.asset.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.asset);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.asset.is_empty() {
            os.write_string(4, &self.asset)?;
        }
        if self.quantity != 0 {
            os.write_sint64(5, self.quantity)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateHolding {
        CreateHolding::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateHolding| { &m.id },
                    |m: &mut CreateHolding| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &CreateHolding| { &m.label },
                    |m: &mut CreateHolding| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &CreateHolding| { &m.description },
                    |m: &mut CreateHolding| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "asset",
                    |m: &CreateHolding| { &m.asset },
                    |m: &mut CreateHolding| { &mut m.asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "quantity",
                    |m: &CreateHolding| { &m.quantity },
                    |m: &mut CreateHolding| { &mut m.quantity },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateHolding>(
                    "CreateHolding",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateHolding {
        static mut instance: ::protobuf::lazy::Lazy<CreateHolding> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateHolding,
        };
        unsafe {
            instance.get(CreateHolding::new)
        }
    }
}

impl ::protobuf::Clear for CreateHolding {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_description();
        self.clear_asset();
        self.clear_quantity();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateHolding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateHolding {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOffer {
    // message fields
    pub id: ::std::string::String,
    pub label: ::std::string::String,
    pub description: ::std::string::String,
    pub source: ::std::string::String,
    pub source_quantity: i64,
    pub target: ::std::string::String,
    pub target_quantity: i64,
    pub rules: ::protobuf::RepeatedField<super::rule::Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateOffer {
    pub fn new() -> CreateOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string label = 2;

    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string source = 4;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }

    // sint64 source_quantity = 5;

    pub fn clear_source_quantity(&mut self) {
        self.source_quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_quantity(&mut self, v: i64) {
        self.source_quantity = v;
    }

    pub fn get_source_quantity(&self) -> i64 {
        self.source_quantity
    }

    // string target = 6;

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::std::string::String) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::std::string::String {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.target, ::std::string::String::new())
    }

    pub fn get_target(&self) -> &str {
        &self.target
    }

    // sint64 target_quantity = 7;

    pub fn clear_target_quantity(&mut self) {
        self.target_quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_quantity(&mut self, v: i64) {
        self.target_quantity = v;
    }

    pub fn get_target_quantity(&self) -> i64 {
        self.target_quantity
    }

    // repeated .Rule rules = 8;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<super::rule::Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<super::rule::Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<super::rule::Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[super::rule::Rule] {
        &self.rules
    }
}

impl ::protobuf::Message for CreateOffer {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.source_quantity = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.target)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.target_quantity = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.source);
        }
        if self.source_quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.source_quantity);
        }
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.target);
        }
        if self.target_quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, self.target_quantity);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.source.is_empty() {
            os.write_string(4, &self.source)?;
        }
        if self.source_quantity != 0 {
            os.write_sint64(5, self.source_quantity)?;
        }
        if !self.target.is_empty() {
            os.write_string(6, &self.target)?;
        }
        if self.target_quantity != 0 {
            os.write_sint64(7, self.target_quantity)?;
        }
        for v in &self.rules {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOffer {
        CreateOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateOffer| { &m.id },
                    |m: &mut CreateOffer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "label",
                    |m: &CreateOffer| { &m.label },
                    |m: &mut CreateOffer| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &CreateOffer| { &m.description },
                    |m: &mut CreateOffer| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source",
                    |m: &CreateOffer| { &m.source },
                    |m: &mut CreateOffer| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "source_quantity",
                    |m: &CreateOffer| { &m.source_quantity },
                    |m: &mut CreateOffer| { &mut m.source_quantity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "target",
                    |m: &CreateOffer| { &m.target },
                    |m: &mut CreateOffer| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "target_quantity",
                    |m: &CreateOffer| { &m.target_quantity },
                    |m: &mut CreateOffer| { &mut m.target_quantity },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rule::Rule>>(
                    "rules",
                    |m: &CreateOffer| { &m.rules },
                    |m: &mut CreateOffer| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOffer>(
                    "CreateOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOffer {
        static mut instance: ::protobuf::lazy::Lazy<CreateOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOffer,
        };
        unsafe {
            instance.get(CreateOffer::new)
        }
    }
}

impl ::protobuf::Clear for CreateOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_description();
        self.clear_source();
        self.clear_source_quantity();
        self.clear_target();
        self.clear_target_quantity();
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AcceptOffer {
    // message fields
    pub id: ::std::string::String,
    pub source: ::std::string::String,
    pub target: ::std::string::String,
    pub count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AcceptOffer {
    pub fn new() -> AcceptOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string source = 2;

    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }

    // string target = 3;

    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::std::string::String) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::std::string::String {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.target, ::std::string::String::new())
    }

    pub fn get_target(&self) -> &str {
        &self.target
    }

    // uint64 count = 4;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    pub fn get_count(&self) -> u64 {
        self.count
    }
}

impl ::protobuf::Message for AcceptOffer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.target)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.target);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.target.is_empty() {
            os.write_string(3, &self.target)?;
        }
        if self.count != 0 {
            os.write_uint64(4, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AcceptOffer {
        AcceptOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &AcceptOffer| { &m.id },
                    |m: &mut AcceptOffer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "source",
                    |m: &AcceptOffer| { &m.source },
                    |m: &mut AcceptOffer| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "target",
                    |m: &AcceptOffer| { &m.target },
                    |m: &mut AcceptOffer| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "count",
                    |m: &AcceptOffer| { &m.count },
                    |m: &mut AcceptOffer| { &mut m.count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AcceptOffer>(
                    "AcceptOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AcceptOffer {
        static mut instance: ::protobuf::lazy::Lazy<AcceptOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AcceptOffer,
        };
        unsafe {
            instance.get(AcceptOffer::new)
        }
    }
}

impl ::protobuf::Clear for AcceptOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_source();
        self.clear_target();
        self.clear_count();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AcceptOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AcceptOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseOffer {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CloseOffer {
    pub fn new() -> CloseOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }
}

impl ::protobuf::Message for CloseOffer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseOffer {
        CloseOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CloseOffer| { &m.id },
                    |m: &mut CloseOffer| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloseOffer>(
                    "CloseOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CloseOffer {
        static mut instance: ::protobuf::lazy::Lazy<CloseOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloseOffer,
        };
        unsafe {
            instance.get(CloseOffer::new)
        }
    }
}

impl ::protobuf::Clear for CloseOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRecord {
    // message fields
    pub record_id: ::std::string::String,
    pub record_type: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<super::property::PropertyValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateRecord {
    pub fn new() -> CreateRecord {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // string record_type = 2;

    pub fn clear_record_type(&mut self) {
        self.record_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_type(&mut self, v: ::std::string::String) {
        self.record_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_type(&mut self) -> &mut ::std::string::String {
        &mut self.record_type
    }

    // Take field
    pub fn take_record_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_type, ::std::string::String::new())
    }

    pub fn get_record_type(&self) -> &str {
        &self.record_type
    }

    // repeated .PropertyValue properties = 3;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<super::property::PropertyValue>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<super::property::PropertyValue> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<super::property::PropertyValue> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_properties(&self) -> &[super::property::PropertyValue] {
        &self.properties
    }
}

impl ::protobuf::Message for CreateRecord {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_type)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if !self.record_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.record_type);
        }
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if !self.record_type.is_empty() {
            os.write_string(2, &self.record_type)?;
        }
        for v in &self.properties {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRecord {
        CreateRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &CreateRecord| { &m.record_id },
                    |m: &mut CreateRecord| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_type",
                    |m: &CreateRecord| { &m.record_type },
                    |m: &mut CreateRecord| { &mut m.record_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::property::PropertyValue>>(
                    "properties",
                    |m: &CreateRecord| { &m.properties },
                    |m: &mut CreateRecord| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRecord>(
                    "CreateRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRecord {
        static mut instance: ::protobuf::lazy::Lazy<CreateRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRecord,
        };
        unsafe {
            instance.get(CreateRecord::new)
        }
    }
}

impl ::protobuf::Clear for CreateRecord {
    fn clear(&mut self) {
        self.clear_record_id();
        self.clear_record_type();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FinalizeRecord {
    // message fields
    pub record_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl FinalizeRecord {
    pub fn new() -> FinalizeRecord {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }
}

impl ::protobuf::Message for FinalizeRecord {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FinalizeRecord {
        FinalizeRecord::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &FinalizeRecord| { &m.record_id },
                    |m: &mut FinalizeRecord| { &mut m.record_id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FinalizeRecord>(
                    "FinalizeRecord",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FinalizeRecord {
        static mut instance: ::protobuf::lazy::Lazy<FinalizeRecord> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FinalizeRecord,
        };
        unsafe {
            instance.get(FinalizeRecord::new)
        }
    }
}

impl ::protobuf::Clear for FinalizeRecord {
    fn clear(&mut self) {
        self.clear_record_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FinalizeRecord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FinalizeRecord {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRecordType {
    // message fields
    pub name: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<super::property::PropertySchema>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateRecordType {
    pub fn new() -> CreateRecordType {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // repeated .PropertySchema properties = 2;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<super::property::PropertySchema>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<super::property::PropertySchema> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<super::property::PropertySchema> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_properties(&self) -> &[super::property::PropertySchema] {
        &self.properties
    }
}

impl ::protobuf::Message for CreateRecordType {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.properties {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRecordType {
        CreateRecordType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CreateRecordType| { &m.name },
                    |m: &mut CreateRecordType| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::property::PropertySchema>>(
                    "properties",
                    |m: &CreateRecordType| { &m.properties },
                    |m: &mut CreateRecordType| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateRecordType>(
                    "CreateRecordType",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateRecordType {
        static mut instance: ::protobuf::lazy::Lazy<CreateRecordType> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateRecordType,
        };
        unsafe {
            instance.get(CreateRecordType::new)
        }
    }
}

impl ::protobuf::Clear for CreateRecordType {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRecordType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRecordType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateProperties {
    // message fields
    pub record_id: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<super::property::PropertyValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl UpdateProperties {
    pub fn new() -> UpdateProperties {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // repeated .PropertyValue properties = 2;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<super::property::PropertyValue>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<super::property::PropertyValue> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<super::property::PropertyValue> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_properties(&self) -> &[super::property::PropertyValue] {
        &self.properties
    }
}

impl ::protobuf::Message for UpdateProperties {
    fn is_initialized(&self) -> bool {
        for v in &self.properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        for value in &self.properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        for v in &self.properties {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateProperties {
        UpdateProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &UpdateProperties| { &m.record_id },
                    |m: &mut UpdateProperties| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::property::PropertyValue>>(
                    "properties",
                    |m: &UpdateProperties| { &m.properties },
                    |m: &mut UpdateProperties| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateProperties>(
                    "UpdateProperties",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateProperties {
        static mut instance: ::protobuf::lazy::Lazy<UpdateProperties> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateProperties,
        };
        unsafe {
            instance.get(UpdateProperties::new)
        }
    }
}

impl ::protobuf::Clear for UpdateProperties {
    fn clear(&mut self) {
        self.clear_record_id();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateProposal {
    // message fields
    pub record_id: ::std::string::String,
    pub receiving_account: ::std::string::String,
    pub role: super::proposal::Proposal_Role,
    pub properties: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateProposal {
    pub fn new() -> CreateProposal {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // string receiving_account = 2;

    pub fn clear_receiving_account(&mut self) {
        self.receiving_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiving_account(&mut self, v: ::std::string::String) {
        self.receiving_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiving_account(&mut self) -> &mut ::std::string::String {
        &mut self.receiving_account
    }

    // Take field
    pub fn take_receiving_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiving_account, ::std::string::String::new())
    }

    pub fn get_receiving_account(&self) -> &str {
        &self.receiving_account
    }

    // .Proposal.Role role = 3;

    pub fn clear_role(&mut self) {
        self.role = super::proposal::Proposal_Role::OWNER;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::proposal::Proposal_Role) {
        self.role = v;
    }

    pub fn get_role(&self) -> super::proposal::Proposal_Role {
        self.role
    }

    // repeated string properties = 4;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_properties(&self) -> &[::std::string::String] {
        &self.properties
    }
}

impl ::protobuf::Message for CreateProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiving_account)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if !self.receiving_account.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.receiving_account);
        }
        if self.role != super::proposal::Proposal_Role::OWNER {
            my_size += ::protobuf::rt::enum_size(3, self.role);
        }
        for value in &self.properties {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if !self.receiving_account.is_empty() {
            os.write_string(2, &self.receiving_account)?;
        }
        if self.role != super::proposal::Proposal_Role::OWNER {
            os.write_enum(3, self.role.value())?;
        }
        for v in &self.properties {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateProposal {
        CreateProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &CreateProposal| { &m.record_id },
                    |m: &mut CreateProposal| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiving_account",
                    |m: &CreateProposal| { &m.receiving_account },
                    |m: &mut CreateProposal| { &mut m.receiving_account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::proposal::Proposal_Role>>(
                    "role",
                    |m: &CreateProposal| { &m.role },
                    |m: &mut CreateProposal| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "properties",
                    |m: &CreateProposal| { &m.properties },
                    |m: &mut CreateProposal| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateProposal>(
                    "CreateProposal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateProposal {
        static mut instance: ::protobuf::lazy::Lazy<CreateProposal> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateProposal,
        };
        unsafe {
            instance.get(CreateProposal::new)
        }
    }
}

impl ::protobuf::Clear for CreateProposal {
    fn clear(&mut self) {
        self.clear_record_id();
        self.clear_receiving_account();
        self.clear_role();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AnswerProposal {
    // message fields
    pub record_id: ::std::string::String,
    pub receiving_account: ::std::string::String,
    pub role: super::proposal::Proposal_Role,
    pub response: AnswerProposal_Response,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AnswerProposal {
    pub fn new() -> AnswerProposal {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // string receiving_account = 2;

    pub fn clear_receiving_account(&mut self) {
        self.receiving_account.clear();
    }

    // Param is passed by value, moved
    pub fn set_receiving_account(&mut self, v: ::std::string::String) {
        self.receiving_account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receiving_account(&mut self) -> &mut ::std::string::String {
        &mut self.receiving_account
    }

    // Take field
    pub fn take_receiving_account(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receiving_account, ::std::string::String::new())
    }

    pub fn get_receiving_account(&self) -> &str {
        &self.receiving_account
    }

    // .Proposal.Role role = 3;

    pub fn clear_role(&mut self) {
        self.role = super::proposal::Proposal_Role::OWNER;
    }

    // Param is passed by value, moved
    pub fn set_role(&mut self, v: super::proposal::Proposal_Role) {
        self.role = v;
    }

    pub fn get_role(&self) -> super::proposal::Proposal_Role {
        self.role
    }

    // .AnswerProposal.Response response = 4;

    pub fn clear_response(&mut self) {
        self.response = AnswerProposal_Response::ACCEPT;
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: AnswerProposal_Response) {
        self.response = v;
    }

    pub fn get_response(&self) -> AnswerProposal_Response {
        self.response
    }
}

impl ::protobuf::Message for AnswerProposal {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receiving_account)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.role, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.response, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if !self.receiving_account.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.receiving_account);
        }
        if self.role != super::proposal::Proposal_Role::OWNER {
            my_size += ::protobuf::rt::enum_size(3, self.role);
        }
        if self.response != AnswerProposal_Response::ACCEPT {
            my_size += ::protobuf::rt::enum_size(4, self.response);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if !self.receiving_account.is_empty() {
            os.write_string(2, &self.receiving_account)?;
        }
        if self.role != super::proposal::Proposal_Role::OWNER {
            os.write_enum(3, self.role.value())?;
        }
        if self.response != AnswerProposal_Response::ACCEPT {
            os.write_enum(4, self.response.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AnswerProposal {
        AnswerProposal::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &AnswerProposal| { &m.record_id },
                    |m: &mut AnswerProposal| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "receiving_account",
                    |m: &AnswerProposal| { &m.receiving_account },
                    |m: &mut AnswerProposal| { &mut m.receiving_account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::proposal::Proposal_Role>>(
                    "role",
                    |m: &AnswerProposal| { &m.role },
                    |m: &mut AnswerProposal| { &mut m.role },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<AnswerProposal_Response>>(
                    "response",
                    |m: &AnswerProposal| { &m.response },
                    |m: &mut AnswerProposal| { &mut m.response },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AnswerProposal>(
                    "AnswerProposal",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AnswerProposal {
        static mut instance: ::protobuf::lazy::Lazy<AnswerProposal> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AnswerProposal,
        };
        unsafe {
            instance.get(AnswerProposal::new)
        }
    }
}

impl ::protobuf::Clear for AnswerProposal {
    fn clear(&mut self) {
        self.clear_record_id();
        self.clear_receiving_account();
        self.clear_role();
        self.clear_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AnswerProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnswerProposal {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum AnswerProposal_Response {
    ACCEPT = 0,
    REJECT = 1,
    CANCEL = 2,
}

impl ::protobuf::ProtobufEnum for AnswerProposal_Response {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AnswerProposal_Response> {
        match value {
            0 => ::std::option::Option::Some(AnswerProposal_Response::ACCEPT),
            1 => ::std::option::Option::Some(AnswerProposal_Response::REJECT),
            2 => ::std::option::Option::Some(AnswerProposal_Response::CANCEL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [AnswerProposal_Response] = &[
            AnswerProposal_Response::ACCEPT,
            AnswerProposal_Response::REJECT,
            AnswerProposal_Response::CANCEL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("AnswerProposal_Response", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for AnswerProposal_Response {
}

impl ::std::default::Default for AnswerProposal_Response {
    fn default() -> Self {
        AnswerProposal_Response::ACCEPT
    }
}

impl ::protobuf::reflect::ProtobufValue for AnswerProposal_Response {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeReporter {
    // message fields
    pub record_id: ::std::string::String,
    pub reporter_id: ::std::string::String,
    pub properties: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl RevokeReporter {
    pub fn new() -> RevokeReporter {
        ::std::default::Default::default()
    }

    // string record_id = 1;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // string reporter_id = 2;

    pub fn clear_reporter_id(&mut self) {
        self.reporter_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_reporter_id(&mut self, v: ::std::string::String) {
        self.reporter_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reporter_id(&mut self) -> &mut ::std::string::String {
        &mut self.reporter_id
    }

    // Take field
    pub fn take_reporter_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reporter_id, ::std::string::String::new())
    }

    pub fn get_reporter_id(&self) -> &str {
        &self.reporter_id
    }

    // repeated string properties = 3;

    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_properties(&self) -> &[::std::string::String] {
        &self.properties
    }
}

impl ::protobuf::Message for RevokeReporter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reporter_id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.record_id);
        }
        if !self.reporter_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.reporter_id);
        }
        for value in &self.properties {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.record_id.is_empty() {
            os.write_string(1, &self.record_id)?;
        }
        if !self.reporter_id.is_empty() {
            os.write_string(2, &self.reporter_id)?;
        }
        for v in &self.properties {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeReporter {
        RevokeReporter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &RevokeReporter| { &m.record_id },
                    |m: &mut RevokeReporter| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "reporter_id",
                    |m: &RevokeReporter| { &m.reporter_id },
                    |m: &mut RevokeReporter| { &mut m.reporter_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "properties",
                    |m: &RevokeReporter| { &m.properties },
                    |m: &mut RevokeReporter| { &mut m.properties },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RevokeReporter>(
                    "RevokeReporter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RevokeReporter {
        static mut instance: ::protobuf::lazy::Lazy<RevokeReporter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RevokeReporter,
        };
        unsafe {
            instance.get(RevokeReporter::new)
        }
    }
}

impl ::protobuf::Clear for RevokeReporter {
    fn clear(&mut self) {
        self.clear_record_id();
        self.clear_reporter_id();
        self.clear_properties();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeReporter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeReporter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\x1a\nrule.proto\x1a\x0eproperty.proto\x1a\x0eproposal.\
    proto\"\xe7\x08\n\x12TransactionPayload\x12B\n\x0cpayload_type\x18\x01\
    \x20\x01(\x0e2\x1f.TransactionPayload.PayloadTypeR\x0bpayloadType\x12\
    \x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\ttimestamp\x125\n\x0ecreate_acco\
    unt\x18\x03\x20\x01(\x0b2\x0e.CreateAccountR\rcreateAccount\x12/\n\x0ccr\
    eate_asset\x18\x04\x20\x01(\x0b2\x0c.CreateAssetR\x0bcreateAsset\x125\n\
    \x0ecreate_holding\x18\x05\x20\x01(\x0b2\x0e.CreateHoldingR\rcreateHoldi\
    ng\x12/\n\x0ccreate_offer\x18\x06\x20\x01(\x0b2\x0c.CreateOfferR\x0bcrea\
    teOffer\x12/\n\x0caccept_offer\x18\n\x20\x01(\x0b2\x0c.AcceptOfferR\x0ba\
    cceptOffer\x12,\n\x0bclose_offer\x18\x0b\x20\x01(\x0b2\x0b.CloseOfferR\n\
    closeOffer\x122\n\rcreate_record\x18\x15\x20\x01(\x0b2\r.CreateRecordR\
    \x0ccreateRecord\x128\n\x0ffinalize_record\x18\x16\x20\x01(\x0b2\x0f.Fin\
    alizeRecordR\x0efinalizeRecord\x12?\n\x12create_record_type\x18\x17\x20\
    \x01(\x0b2\x11.CreateRecordTypeR\x10createRecordType\x12>\n\x11update_pr\
    operties\x18\x18\x20\x01(\x0b2\x11.UpdatePropertiesR\x10updateProperties\
    \x128\n\x0fcreate_proposal\x18\x19\x20\x01(\x0b2\x0f.CreateProposalR\x0e\
    createProposal\x128\n\x0fanswer_proposal\x18\x1a\x20\x01(\x0b2\x0f.Answe\
    rProposalR\x0eanswerProposal\x128\n\x0frevoke_reporter\x18\x1b\x20\x01(\
    \x0b2\x0f.RevokeReporterR\x0erevokeReporter\"\xa2\x02\n\x0bPayloadType\
    \x12\x0e\n\nTYPE_UNSET\x10\0\x12\x12\n\x0eCREATE_ACCOUNT\x10\x02\x12\x10\
    \n\x0cCREATE_ASSET\x10\x03\x12\x12\n\x0eCREATE_HOLDING\x10\x04\x12\x10\n\
    \x0cCREATE_OFFER\x10\x05\x12\x10\n\x0cACCEPT_OFFER\x10\n\x12\x0f\n\x0bCL\
    OSE_OFFER\x10\x0b\x12\x11\n\rCREATE_RECORD\x10\x15\x12\x13\n\x0fFINALIZE\
    _RECORD\x10\x16\x12\x16\n\x12CREATE_RECORD_TYPE\x10\x17\x12\x15\n\x11UPD\
    ATE_PROPERTIES\x10\x18\x12\x13\n\x0fCREATE_PROPOSAL\x10\x19\x12\x13\n\
    \x0fANSWER_PROPOSAL\x10\x1a\x12\x13\n\x0fREVOKE_REPORTER\x10\x1b\"G\n\rC\
    reateAccount\x12\x14\n\x05label\x18\x01\x20\x01(\tR\x05label\x12\x20\n\
    \x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\"`\n\x0bCreateAsset\
    \x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\
    \x18\x02\x20\x01(\tR\x0bdescription\x12\x1b\n\x05rules\x18\x03\x20\x03(\
    \x0b2\x05.RuleR\x05rules\"\x89\x01\n\rCreateHolding\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\
    \x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12\x14\n\
    \x05asset\x18\x04\x20\x01(\tR\x05asset\x12\x1a\n\x08quantity\x18\x05\x20\
    \x01(\x12R\x08quantity\"\xf4\x01\n\x0bCreateOffer\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\tR\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\
    \x12\x20\n\x0bdescription\x18\x03\x20\x01(\tR\x0bdescription\x12\x16\n\
    \x06source\x18\x04\x20\x01(\tR\x06source\x12'\n\x0fsource_quantity\x18\
    \x05\x20\x01(\x12R\x0esourceQuantity\x12\x16\n\x06target\x18\x06\x20\x01\
    (\tR\x06target\x12'\n\x0ftarget_quantity\x18\x07\x20\x01(\x12R\x0etarget\
    Quantity\x12\x1b\n\x05rules\x18\x08\x20\x03(\x0b2\x05.RuleR\x05rules\"c\
    \n\x0bAcceptOffer\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x16\n\
    \x06source\x18\x02\x20\x01(\tR\x06source\x12\x16\n\x06target\x18\x03\x20\
    \x01(\tR\x06target\x12\x14\n\x05count\x18\x04\x20\x01(\x04R\x05count\"\
    \x1c\n\nCloseOffer\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"|\n\x0cCre\
    ateRecord\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\x12\x1f\n\
    \x0brecord_type\x18\x02\x20\x01(\tR\nrecordType\x12.\n\nproperties\x18\
    \x03\x20\x03(\x0b2\x0e.PropertyValueR\nproperties\"-\n\x0eFinalizeRecord\
    \x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\"W\n\x10CreateReco\
    rdType\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12/\n\nproperties\
    \x18\x02\x20\x03(\x0b2\x0f.PropertySchemaR\nproperties\"_\n\x10UpdatePro\
    perties\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\x12.\n\npro\
    perties\x18\x02\x20\x03(\x0b2\x0e.PropertyValueR\nproperties\"\x9e\x01\n\
    \x0eCreateProposal\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\
    \x12+\n\x11receiving_account\x18\x02\x20\x01(\tR\x10receivingAccount\x12\
    \"\n\x04role\x18\x03\x20\x01(\x0e2\x0e.Proposal.RoleR\x04role\x12\x1e\n\
    \nproperties\x18\x04\x20\x03(\tR\nproperties\"\xe4\x01\n\x0eAnswerPropos\
    al\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08recordId\x12+\n\x11receiv\
    ing_account\x18\x02\x20\x01(\tR\x10receivingAccount\x12\"\n\x04role\x18\
    \x03\x20\x01(\x0e2\x0e.Proposal.RoleR\x04role\x124\n\x08response\x18\x04\
    \x20\x01(\x0e2\x18.AnswerProposal.ResponseR\x08response\".\n\x08Response\
    \x12\n\n\x06ACCEPT\x10\0\x12\n\n\x06REJECT\x10\x01\x12\n\n\x06CANCEL\x10\
    \x02\"n\n\x0eRevokeReporter\x12\x1b\n\trecord_id\x18\x01\x20\x01(\tR\x08\
    recordId\x12\x1f\n\x0breporter_id\x18\x02\x20\x01(\tR\nreporterId\x12\
    \x1e\n\nproperties\x18\x03\x20\x03(\tR\npropertiesb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}

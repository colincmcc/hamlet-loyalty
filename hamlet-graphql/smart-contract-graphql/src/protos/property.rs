// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Property {
    // message fields
    pub name: ::std::string::String,
    pub record_id: ::std::string::String,
    pub data_type: PropertySchema_DataType,
    pub reporters: ::protobuf::RepeatedField<Property_Reporter>,
    pub current_page: u32,
    pub wrapped: bool,
    pub fixed: bool,
    pub number_exponent: i32,
    pub enum_options: ::protobuf::RepeatedField<::std::string::String>,
    pub struct_properties: ::protobuf::RepeatedField<PropertySchema>,
    pub unit: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Property {
    pub fn new() -> Property {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string record_id = 2;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // .PropertySchema.DataType data_type = 3;

    pub fn clear_data_type(&mut self) {
        self.data_type = PropertySchema_DataType::TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: PropertySchema_DataType) {
        self.data_type = v;
    }

    pub fn get_data_type(&self) -> PropertySchema_DataType {
        self.data_type
    }

    // repeated .Property.Reporter reporters = 4;

    pub fn clear_reporters(&mut self) {
        self.reporters.clear();
    }

    // Param is passed by value, moved
    pub fn set_reporters(&mut self, v: ::protobuf::RepeatedField<Property_Reporter>) {
        self.reporters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reporters(&mut self) -> &mut ::protobuf::RepeatedField<Property_Reporter> {
        &mut self.reporters
    }

    // Take field
    pub fn take_reporters(&mut self) -> ::protobuf::RepeatedField<Property_Reporter> {
        ::std::mem::replace(&mut self.reporters, ::protobuf::RepeatedField::new())
    }

    pub fn get_reporters(&self) -> &[Property_Reporter] {
        &self.reporters
    }

    // uint32 current_page = 5;

    pub fn clear_current_page(&mut self) {
        self.current_page = 0;
    }

    // Param is passed by value, moved
    pub fn set_current_page(&mut self, v: u32) {
        self.current_page = v;
    }

    pub fn get_current_page(&self) -> u32 {
        self.current_page
    }

    // bool wrapped = 6;

    pub fn clear_wrapped(&mut self) {
        self.wrapped = false;
    }

    // Param is passed by value, moved
    pub fn set_wrapped(&mut self, v: bool) {
        self.wrapped = v;
    }

    pub fn get_wrapped(&self) -> bool {
        self.wrapped
    }

    // bool fixed = 9;

    pub fn clear_fixed(&mut self) {
        self.fixed = false;
    }

    // Param is passed by value, moved
    pub fn set_fixed(&mut self, v: bool) {
        self.fixed = v;
    }

    pub fn get_fixed(&self) -> bool {
        self.fixed
    }

    // sint32 number_exponent = 10;

    pub fn clear_number_exponent(&mut self) {
        self.number_exponent = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_exponent(&mut self, v: i32) {
        self.number_exponent = v;
    }

    pub fn get_number_exponent(&self) -> i32 {
        self.number_exponent
    }

    // repeated string enum_options = 11;

    pub fn clear_enum_options(&mut self) {
        self.enum_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_enum_options(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.enum_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_enum_options(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.enum_options
    }

    // Take field
    pub fn take_enum_options(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.enum_options, ::protobuf::RepeatedField::new())
    }

    pub fn get_enum_options(&self) -> &[::std::string::String] {
        &self.enum_options
    }

    // repeated .PropertySchema struct_properties = 12;

    pub fn clear_struct_properties(&mut self) {
        self.struct_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_struct_properties(&mut self, v: ::protobuf::RepeatedField<PropertySchema>) {
        self.struct_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_struct_properties(&mut self) -> &mut ::protobuf::RepeatedField<PropertySchema> {
        &mut self.struct_properties
    }

    // Take field
    pub fn take_struct_properties(&mut self) -> ::protobuf::RepeatedField<PropertySchema> {
        ::std::mem::replace(&mut self.struct_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_struct_properties(&self) -> &[PropertySchema] {
        &self.struct_properties
    }

    // string unit = 20;

    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    pub fn get_unit(&self) -> &str {
        &self.unit
    }
}

impl ::protobuf::Message for Property {
    fn is_initialized(&self) -> bool {
        for v in &self.reporters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.struct_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.reporters)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.current_page = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.wrapped = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fixed = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.number_exponent = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.enum_options)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.struct_properties)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.record_id);
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(3, self.data_type);
        }
        for value in &self.reporters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.current_page != 0 {
            my_size += ::protobuf::rt::value_size(5, self.current_page, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.wrapped != false {
            my_size += 2;
        }
        if self.fixed != false {
            my_size += 2;
        }
        if self.number_exponent != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(10, self.number_exponent);
        }
        for value in &self.enum_options {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.struct_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.record_id.is_empty() {
            os.write_string(2, &self.record_id)?;
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            os.write_enum(3, self.data_type.value())?;
        }
        for v in &self.reporters {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.current_page != 0 {
            os.write_uint32(5, self.current_page)?;
        }
        if self.wrapped != false {
            os.write_bool(6, self.wrapped)?;
        }
        if self.fixed != false {
            os.write_bool(9, self.fixed)?;
        }
        if self.number_exponent != 0 {
            os.write_sint32(10, self.number_exponent)?;
        }
        for v in &self.enum_options {
            os.write_string(11, &v)?;
        };
        for v in &self.struct_properties {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.unit.is_empty() {
            os.write_string(20, &self.unit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Property {
        Property::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &Property| { &m.name },
                    |m: &mut Property| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &Property| { &m.record_id },
                    |m: &mut Property| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PropertySchema_DataType>>(
                    "data_type",
                    |m: &Property| { &m.data_type },
                    |m: &mut Property| { &mut m.data_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Property_Reporter>>(
                    "reporters",
                    |m: &Property| { &m.reporters },
                    |m: &mut Property| { &mut m.reporters },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "current_page",
                    |m: &Property| { &m.current_page },
                    |m: &mut Property| { &mut m.current_page },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "wrapped",
                    |m: &Property| { &m.wrapped },
                    |m: &mut Property| { &mut m.wrapped },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fixed",
                    |m: &Property| { &m.fixed },
                    |m: &mut Property| { &mut m.fixed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "number_exponent",
                    |m: &Property| { &m.number_exponent },
                    |m: &mut Property| { &mut m.number_exponent },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "enum_options",
                    |m: &Property| { &m.enum_options },
                    |m: &mut Property| { &mut m.enum_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertySchema>>(
                    "struct_properties",
                    |m: &Property| { &m.struct_properties },
                    |m: &mut Property| { &mut m.struct_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "unit",
                    |m: &Property| { &m.unit },
                    |m: &mut Property| { &mut m.unit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Property>(
                    "Property",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Property {
        static mut instance: ::protobuf::lazy::Lazy<Property> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Property,
        };
        unsafe {
            instance.get(Property::new)
        }
    }
}

impl ::protobuf::Clear for Property {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_record_id();
        self.clear_data_type();
        self.clear_reporters();
        self.clear_current_page();
        self.clear_wrapped();
        self.clear_fixed();
        self.clear_number_exponent();
        self.clear_enum_options();
        self.clear_struct_properties();
        self.clear_unit();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Property {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Property {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Property_Reporter {
    // message fields
    pub public_key: ::std::string::String,
    pub authorized: bool,
    pub index: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Property_Reporter {
    pub fn new() -> Property_Reporter {
        ::std::default::Default::default()
    }

    // string public_key = 1;

    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }

    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }

    // bool authorized = 2;

    pub fn clear_authorized(&mut self) {
        self.authorized = false;
    }

    // Param is passed by value, moved
    pub fn set_authorized(&mut self, v: bool) {
        self.authorized = v;
    }

    pub fn get_authorized(&self) -> bool {
        self.authorized
    }

    // uint32 index = 3;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.index = v;
    }

    pub fn get_index(&self) -> u32 {
        self.index
    }
}

impl ::protobuf::Message for Property_Reporter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.authorized = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.public_key);
        }
        if self.authorized != false {
            my_size += 2;
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.public_key.is_empty() {
            os.write_string(1, &self.public_key)?;
        }
        if self.authorized != false {
            os.write_bool(2, self.authorized)?;
        }
        if self.index != 0 {
            os.write_uint32(3, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Property_Reporter {
        Property_Reporter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "public_key",
                    |m: &Property_Reporter| { &m.public_key },
                    |m: &mut Property_Reporter| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "authorized",
                    |m: &Property_Reporter| { &m.authorized },
                    |m: &mut Property_Reporter| { &mut m.authorized },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "index",
                    |m: &Property_Reporter| { &m.index },
                    |m: &mut Property_Reporter| { &mut m.index },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Property_Reporter>(
                    "Property_Reporter",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Property_Reporter {
        static mut instance: ::protobuf::lazy::Lazy<Property_Reporter> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Property_Reporter,
        };
        unsafe {
            instance.get(Property_Reporter::new)
        }
    }
}

impl ::protobuf::Clear for Property_Reporter {
    fn clear(&mut self) {
        self.clear_public_key();
        self.clear_authorized();
        self.clear_index();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Property_Reporter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Property_Reporter {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyContainer {
    // message fields
    pub entries: ::protobuf::RepeatedField<Property>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertyContainer {
    pub fn new() -> PropertyContainer {
        ::std::default::Default::default()
    }

    // repeated .Property entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Property>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Property> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Property> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[Property] {
        &self.entries
    }
}

impl ::protobuf::Message for PropertyContainer {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyContainer {
        PropertyContainer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Property>>(
                    "entries",
                    |m: &PropertyContainer| { &m.entries },
                    |m: &mut PropertyContainer| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyContainer>(
                    "PropertyContainer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertyContainer {
        static mut instance: ::protobuf::lazy::Lazy<PropertyContainer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyContainer,
        };
        unsafe {
            instance.get(PropertyContainer::new)
        }
    }
}

impl ::protobuf::Clear for PropertyContainer {
    fn clear(&mut self) {
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyContainer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertySchema {
    // message fields
    pub name: ::std::string::String,
    pub data_type: PropertySchema_DataType,
    pub required: bool,
    pub fixed: bool,
    pub delayed: bool,
    pub number_exponent: i32,
    pub enum_options: ::protobuf::RepeatedField<::std::string::String>,
    pub struct_properties: ::protobuf::RepeatedField<PropertySchema>,
    pub unit: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertySchema {
    pub fn new() -> PropertySchema {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .PropertySchema.DataType data_type = 2;

    pub fn clear_data_type(&mut self) {
        self.data_type = PropertySchema_DataType::TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: PropertySchema_DataType) {
        self.data_type = v;
    }

    pub fn get_data_type(&self) -> PropertySchema_DataType {
        self.data_type
    }

    // bool required = 3;

    pub fn clear_required(&mut self) {
        self.required = false;
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = v;
    }

    pub fn get_required(&self) -> bool {
        self.required
    }

    // bool fixed = 4;

    pub fn clear_fixed(&mut self) {
        self.fixed = false;
    }

    // Param is passed by value, moved
    pub fn set_fixed(&mut self, v: bool) {
        self.fixed = v;
    }

    pub fn get_fixed(&self) -> bool {
        self.fixed
    }

    // bool delayed = 5;

    pub fn clear_delayed(&mut self) {
        self.delayed = false;
    }

    // Param is passed by value, moved
    pub fn set_delayed(&mut self, v: bool) {
        self.delayed = v;
    }

    pub fn get_delayed(&self) -> bool {
        self.delayed
    }

    // sint32 number_exponent = 10;

    pub fn clear_number_exponent(&mut self) {
        self.number_exponent = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_exponent(&mut self, v: i32) {
        self.number_exponent = v;
    }

    pub fn get_number_exponent(&self) -> i32 {
        self.number_exponent
    }

    // repeated string enum_options = 11;

    pub fn clear_enum_options(&mut self) {
        self.enum_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_enum_options(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.enum_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_enum_options(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.enum_options
    }

    // Take field
    pub fn take_enum_options(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.enum_options, ::protobuf::RepeatedField::new())
    }

    pub fn get_enum_options(&self) -> &[::std::string::String] {
        &self.enum_options
    }

    // repeated .PropertySchema struct_properties = 12;

    pub fn clear_struct_properties(&mut self) {
        self.struct_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_struct_properties(&mut self, v: ::protobuf::RepeatedField<PropertySchema>) {
        self.struct_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_struct_properties(&mut self) -> &mut ::protobuf::RepeatedField<PropertySchema> {
        &mut self.struct_properties
    }

    // Take field
    pub fn take_struct_properties(&mut self) -> ::protobuf::RepeatedField<PropertySchema> {
        ::std::mem::replace(&mut self.struct_properties, ::protobuf::RepeatedField::new())
    }

    pub fn get_struct_properties(&self) -> &[PropertySchema] {
        &self.struct_properties
    }

    // string unit = 20;

    pub fn clear_unit(&mut self) {
        self.unit.clear();
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: ::std::string::String) {
        self.unit = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unit(&mut self) -> &mut ::std::string::String {
        &mut self.unit
    }

    // Take field
    pub fn take_unit(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.unit, ::std::string::String::new())
    }

    pub fn get_unit(&self) -> &str {
        &self.unit
    }
}

impl ::protobuf::Message for PropertySchema {
    fn is_initialized(&self) -> bool {
        for v in &self.struct_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.required = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fixed = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.delayed = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.number_exponent = tmp;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.enum_options)?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.struct_properties)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.unit)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.data_type);
        }
        if self.required != false {
            my_size += 2;
        }
        if self.fixed != false {
            my_size += 2;
        }
        if self.delayed != false {
            my_size += 2;
        }
        if self.number_exponent != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(10, self.number_exponent);
        }
        for value in &self.enum_options {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        for value in &self.struct_properties {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.unit.is_empty() {
            my_size += ::protobuf::rt::string_size(20, &self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            os.write_enum(2, self.data_type.value())?;
        }
        if self.required != false {
            os.write_bool(3, self.required)?;
        }
        if self.fixed != false {
            os.write_bool(4, self.fixed)?;
        }
        if self.delayed != false {
            os.write_bool(5, self.delayed)?;
        }
        if self.number_exponent != 0 {
            os.write_sint32(10, self.number_exponent)?;
        }
        for v in &self.enum_options {
            os.write_string(11, &v)?;
        };
        for v in &self.struct_properties {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.unit.is_empty() {
            os.write_string(20, &self.unit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertySchema {
        PropertySchema::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PropertySchema| { &m.name },
                    |m: &mut PropertySchema| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PropertySchema_DataType>>(
                    "data_type",
                    |m: &PropertySchema| { &m.data_type },
                    |m: &mut PropertySchema| { &mut m.data_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "required",
                    |m: &PropertySchema| { &m.required },
                    |m: &mut PropertySchema| { &mut m.required },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "fixed",
                    |m: &PropertySchema| { &m.fixed },
                    |m: &mut PropertySchema| { &mut m.fixed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "delayed",
                    |m: &PropertySchema| { &m.delayed },
                    |m: &mut PropertySchema| { &mut m.delayed },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                    "number_exponent",
                    |m: &PropertySchema| { &m.number_exponent },
                    |m: &mut PropertySchema| { &mut m.number_exponent },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "enum_options",
                    |m: &PropertySchema| { &m.enum_options },
                    |m: &mut PropertySchema| { &mut m.enum_options },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertySchema>>(
                    "struct_properties",
                    |m: &PropertySchema| { &m.struct_properties },
                    |m: &mut PropertySchema| { &mut m.struct_properties },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "unit",
                    |m: &PropertySchema| { &m.unit },
                    |m: &mut PropertySchema| { &mut m.unit },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertySchema>(
                    "PropertySchema",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertySchema {
        static mut instance: ::protobuf::lazy::Lazy<PropertySchema> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertySchema,
        };
        unsafe {
            instance.get(PropertySchema::new)
        }
    }
}

impl ::protobuf::Clear for PropertySchema {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_data_type();
        self.clear_required();
        self.clear_fixed();
        self.clear_delayed();
        self.clear_number_exponent();
        self.clear_enum_options();
        self.clear_struct_properties();
        self.clear_unit();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertySchema {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertySchema {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PropertySchema_DataType {
    TYPE_UNSET = 0,
    BYTES = 1,
    BOOLEAN = 2,
    NUMBER = 3,
    STRING = 4,
    ENUM = 5,
    STRUCT = 6,
    LOCATION = 7,
}

impl ::protobuf::ProtobufEnum for PropertySchema_DataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PropertySchema_DataType> {
        match value {
            0 => ::std::option::Option::Some(PropertySchema_DataType::TYPE_UNSET),
            1 => ::std::option::Option::Some(PropertySchema_DataType::BYTES),
            2 => ::std::option::Option::Some(PropertySchema_DataType::BOOLEAN),
            3 => ::std::option::Option::Some(PropertySchema_DataType::NUMBER),
            4 => ::std::option::Option::Some(PropertySchema_DataType::STRING),
            5 => ::std::option::Option::Some(PropertySchema_DataType::ENUM),
            6 => ::std::option::Option::Some(PropertySchema_DataType::STRUCT),
            7 => ::std::option::Option::Some(PropertySchema_DataType::LOCATION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PropertySchema_DataType] = &[
            PropertySchema_DataType::TYPE_UNSET,
            PropertySchema_DataType::BYTES,
            PropertySchema_DataType::BOOLEAN,
            PropertySchema_DataType::NUMBER,
            PropertySchema_DataType::STRING,
            PropertySchema_DataType::ENUM,
            PropertySchema_DataType::STRUCT,
            PropertySchema_DataType::LOCATION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PropertySchema_DataType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PropertySchema_DataType {
}

impl ::std::default::Default for PropertySchema_DataType {
    fn default() -> Self {
        PropertySchema_DataType::TYPE_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertySchema_DataType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyValue {
    // message fields
    pub name: ::std::string::String,
    pub data_type: PropertySchema_DataType,
    pub bytes_value: ::std::vec::Vec<u8>,
    pub boolean_value: bool,
    pub number_value: i64,
    pub string_value: ::std::string::String,
    pub enum_value: ::std::string::String,
    pub struct_values: ::protobuf::RepeatedField<PropertyValue>,
    pub location_value: ::protobuf::SingularPtrField<Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertyValue {
    pub fn new() -> PropertyValue {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .PropertySchema.DataType data_type = 2;

    pub fn clear_data_type(&mut self) {
        self.data_type = PropertySchema_DataType::TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_data_type(&mut self, v: PropertySchema_DataType) {
        self.data_type = v;
    }

    pub fn get_data_type(&self) -> PropertySchema_DataType {
        self.data_type
    }

    // bytes bytes_value = 11;

    pub fn clear_bytes_value(&mut self) {
        self.bytes_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes_value
    }

    // Take field
    pub fn take_bytes_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes_value, ::std::vec::Vec::new())
    }

    pub fn get_bytes_value(&self) -> &[u8] {
        &self.bytes_value
    }

    // bool boolean_value = 12;

    pub fn clear_boolean_value(&mut self) {
        self.boolean_value = false;
    }

    // Param is passed by value, moved
    pub fn set_boolean_value(&mut self, v: bool) {
        self.boolean_value = v;
    }

    pub fn get_boolean_value(&self) -> bool {
        self.boolean_value
    }

    // sint64 number_value = 13;

    pub fn clear_number_value(&mut self) {
        self.number_value = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_value(&mut self, v: i64) {
        self.number_value = v;
    }

    pub fn get_number_value(&self) -> i64 {
        self.number_value
    }

    // string string_value = 14;

    pub fn clear_string_value(&mut self) {
        self.string_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.string_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        &mut self.string_value
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.string_value, ::std::string::String::new())
    }

    pub fn get_string_value(&self) -> &str {
        &self.string_value
    }

    // string enum_value = 15;

    pub fn clear_enum_value(&mut self) {
        self.enum_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_enum_value(&mut self, v: ::std::string::String) {
        self.enum_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enum_value(&mut self) -> &mut ::std::string::String {
        &mut self.enum_value
    }

    // Take field
    pub fn take_enum_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.enum_value, ::std::string::String::new())
    }

    pub fn get_enum_value(&self) -> &str {
        &self.enum_value
    }

    // repeated .PropertyValue struct_values = 16;

    pub fn clear_struct_values(&mut self) {
        self.struct_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_struct_values(&mut self, v: ::protobuf::RepeatedField<PropertyValue>) {
        self.struct_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_struct_values(&mut self) -> &mut ::protobuf::RepeatedField<PropertyValue> {
        &mut self.struct_values
    }

    // Take field
    pub fn take_struct_values(&mut self) -> ::protobuf::RepeatedField<PropertyValue> {
        ::std::mem::replace(&mut self.struct_values, ::protobuf::RepeatedField::new())
    }

    pub fn get_struct_values(&self) -> &[PropertyValue] {
        &self.struct_values
    }

    // .Location location_value = 17;

    pub fn clear_location_value(&mut self) {
        self.location_value.clear();
    }

    pub fn has_location_value(&self) -> bool {
        self.location_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_value(&mut self, v: Location) {
        self.location_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location_value(&mut self) -> &mut Location {
        if self.location_value.is_none() {
            self.location_value.set_default();
        }
        self.location_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_location_value(&mut self) -> Location {
        self.location_value.take().unwrap_or_else(|| Location::new())
    }

    pub fn get_location_value(&self) -> &Location {
        self.location_value.as_ref().unwrap_or_else(|| Location::default_instance())
    }
}

impl ::protobuf::Message for PropertyValue {
    fn is_initialized(&self) -> bool {
        for v in &self.struct_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location_value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.data_type, 2, &mut self.unknown_fields)?
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_value)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.boolean_value = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.number_value = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.string_value)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.enum_value)?;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.struct_values)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(2, self.data_type);
        }
        if !self.bytes_value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.bytes_value);
        }
        if self.boolean_value != false {
            my_size += 2;
        }
        if self.number_value != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(13, self.number_value);
        }
        if !self.string_value.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.string_value);
        }
        if !self.enum_value.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.enum_value);
        }
        for value in &self.struct_values {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.location_value.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.data_type != PropertySchema_DataType::TYPE_UNSET {
            os.write_enum(2, self.data_type.value())?;
        }
        if !self.bytes_value.is_empty() {
            os.write_bytes(11, &self.bytes_value)?;
        }
        if self.boolean_value != false {
            os.write_bool(12, self.boolean_value)?;
        }
        if self.number_value != 0 {
            os.write_sint64(13, self.number_value)?;
        }
        if !self.string_value.is_empty() {
            os.write_string(14, &self.string_value)?;
        }
        if !self.enum_value.is_empty() {
            os.write_string(15, &self.enum_value)?;
        }
        for v in &self.struct_values {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.location_value.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyValue {
        PropertyValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PropertyValue| { &m.name },
                    |m: &mut PropertyValue| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PropertySchema_DataType>>(
                    "data_type",
                    |m: &PropertyValue| { &m.data_type },
                    |m: &mut PropertyValue| { &mut m.data_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bytes_value",
                    |m: &PropertyValue| { &m.bytes_value },
                    |m: &mut PropertyValue| { &mut m.bytes_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "boolean_value",
                    |m: &PropertyValue| { &m.boolean_value },
                    |m: &mut PropertyValue| { &mut m.boolean_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "number_value",
                    |m: &PropertyValue| { &m.number_value },
                    |m: &mut PropertyValue| { &mut m.number_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_value",
                    |m: &PropertyValue| { &m.string_value },
                    |m: &mut PropertyValue| { &mut m.string_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "enum_value",
                    |m: &PropertyValue| { &m.enum_value },
                    |m: &mut PropertyValue| { &mut m.enum_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyValue>>(
                    "struct_values",
                    |m: &PropertyValue| { &m.struct_values },
                    |m: &mut PropertyValue| { &mut m.struct_values },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                    "location_value",
                    |m: &PropertyValue| { &m.location_value },
                    |m: &mut PropertyValue| { &mut m.location_value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyValue>(
                    "PropertyValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertyValue {
        static mut instance: ::protobuf::lazy::Lazy<PropertyValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyValue,
        };
        unsafe {
            instance.get(PropertyValue::new)
        }
    }
}

impl ::protobuf::Clear for PropertyValue {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_data_type();
        self.clear_bytes_value();
        self.clear_boolean_value();
        self.clear_number_value();
        self.clear_string_value();
        self.clear_enum_value();
        self.clear_struct_values();
        self.clear_location_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyPage {
    // message fields
    pub name: ::std::string::String,
    pub record_id: ::std::string::String,
    pub reported_values: ::protobuf::RepeatedField<PropertyPage_ReportedValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertyPage {
    pub fn new() -> PropertyPage {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string record_id = 2;

    pub fn clear_record_id(&mut self) {
        self.record_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_record_id(&mut self, v: ::std::string::String) {
        self.record_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_record_id(&mut self) -> &mut ::std::string::String {
        &mut self.record_id
    }

    // Take field
    pub fn take_record_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.record_id, ::std::string::String::new())
    }

    pub fn get_record_id(&self) -> &str {
        &self.record_id
    }

    // repeated .PropertyPage.ReportedValue reported_values = 3;

    pub fn clear_reported_values(&mut self) {
        self.reported_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_reported_values(&mut self, v: ::protobuf::RepeatedField<PropertyPage_ReportedValue>) {
        self.reported_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reported_values(&mut self) -> &mut ::protobuf::RepeatedField<PropertyPage_ReportedValue> {
        &mut self.reported_values
    }

    // Take field
    pub fn take_reported_values(&mut self) -> ::protobuf::RepeatedField<PropertyPage_ReportedValue> {
        ::std::mem::replace(&mut self.reported_values, ::protobuf::RepeatedField::new())
    }

    pub fn get_reported_values(&self) -> &[PropertyPage_ReportedValue] {
        &self.reported_values
    }
}

impl ::protobuf::Message for PropertyPage {
    fn is_initialized(&self) -> bool {
        for v in &self.reported_values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.record_id)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.reported_values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.record_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.record_id);
        }
        for value in &self.reported_values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.record_id.is_empty() {
            os.write_string(2, &self.record_id)?;
        }
        for v in &self.reported_values {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyPage {
        PropertyPage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PropertyPage| { &m.name },
                    |m: &mut PropertyPage| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "record_id",
                    |m: &PropertyPage| { &m.record_id },
                    |m: &mut PropertyPage| { &mut m.record_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyPage_ReportedValue>>(
                    "reported_values",
                    |m: &PropertyPage| { &m.reported_values },
                    |m: &mut PropertyPage| { &mut m.reported_values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyPage>(
                    "PropertyPage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertyPage {
        static mut instance: ::protobuf::lazy::Lazy<PropertyPage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyPage,
        };
        unsafe {
            instance.get(PropertyPage::new)
        }
    }
}

impl ::protobuf::Clear for PropertyPage {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_record_id();
        self.clear_reported_values();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyPage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyPage_ReportedValue {
    // message fields
    pub reporter_index: u32,
    pub timestamp: u64,
    pub bytes_value: ::std::vec::Vec<u8>,
    pub boolean_value: bool,
    pub number_value: i64,
    pub string_value: ::std::string::String,
    pub enum_value: u32,
    pub struct_values: ::protobuf::RepeatedField<PropertyValue>,
    pub location_value: ::protobuf::SingularPtrField<Location>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertyPage_ReportedValue {
    pub fn new() -> PropertyPage_ReportedValue {
        ::std::default::Default::default()
    }

    // uint32 reporter_index = 1;

    pub fn clear_reporter_index(&mut self) {
        self.reporter_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_reporter_index(&mut self, v: u32) {
        self.reporter_index = v;
    }

    pub fn get_reporter_index(&self) -> u32 {
        self.reporter_index
    }

    // uint64 timestamp = 2;

    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }

    // bytes bytes_value = 11;

    pub fn clear_bytes_value(&mut self) {
        self.bytes_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_bytes_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.bytes_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bytes_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.bytes_value
    }

    // Take field
    pub fn take_bytes_value(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.bytes_value, ::std::vec::Vec::new())
    }

    pub fn get_bytes_value(&self) -> &[u8] {
        &self.bytes_value
    }

    // bool boolean_value = 12;

    pub fn clear_boolean_value(&mut self) {
        self.boolean_value = false;
    }

    // Param is passed by value, moved
    pub fn set_boolean_value(&mut self, v: bool) {
        self.boolean_value = v;
    }

    pub fn get_boolean_value(&self) -> bool {
        self.boolean_value
    }

    // sint64 number_value = 13;

    pub fn clear_number_value(&mut self) {
        self.number_value = 0;
    }

    // Param is passed by value, moved
    pub fn set_number_value(&mut self, v: i64) {
        self.number_value = v;
    }

    pub fn get_number_value(&self) -> i64 {
        self.number_value
    }

    // string string_value = 14;

    pub fn clear_string_value(&mut self) {
        self.string_value.clear();
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.string_value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        &mut self.string_value
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.string_value, ::std::string::String::new())
    }

    pub fn get_string_value(&self) -> &str {
        &self.string_value
    }

    // uint32 enum_value = 15;

    pub fn clear_enum_value(&mut self) {
        self.enum_value = 0;
    }

    // Param is passed by value, moved
    pub fn set_enum_value(&mut self, v: u32) {
        self.enum_value = v;
    }

    pub fn get_enum_value(&self) -> u32 {
        self.enum_value
    }

    // repeated .PropertyValue struct_values = 16;

    pub fn clear_struct_values(&mut self) {
        self.struct_values.clear();
    }

    // Param is passed by value, moved
    pub fn set_struct_values(&mut self, v: ::protobuf::RepeatedField<PropertyValue>) {
        self.struct_values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_struct_values(&mut self) -> &mut ::protobuf::RepeatedField<PropertyValue> {
        &mut self.struct_values
    }

    // Take field
    pub fn take_struct_values(&mut self) -> ::protobuf::RepeatedField<PropertyValue> {
        ::std::mem::replace(&mut self.struct_values, ::protobuf::RepeatedField::new())
    }

    pub fn get_struct_values(&self) -> &[PropertyValue] {
        &self.struct_values
    }

    // .Location location_value = 17;

    pub fn clear_location_value(&mut self) {
        self.location_value.clear();
    }

    pub fn has_location_value(&self) -> bool {
        self.location_value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_location_value(&mut self, v: Location) {
        self.location_value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location_value(&mut self) -> &mut Location {
        if self.location_value.is_none() {
            self.location_value.set_default();
        }
        self.location_value.as_mut().unwrap()
    }

    // Take field
    pub fn take_location_value(&mut self) -> Location {
        self.location_value.take().unwrap_or_else(|| Location::new())
    }

    pub fn get_location_value(&self) -> &Location {
        self.location_value.as_ref().unwrap_or_else(|| Location::default_instance())
    }
}

impl ::protobuf::Message for PropertyPage_ReportedValue {
    fn is_initialized(&self) -> bool {
        for v in &self.struct_values {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.location_value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.reporter_index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.bytes_value)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.boolean_value = tmp;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.number_value = tmp;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.string_value)?;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.enum_value = tmp;
                },
                16 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.struct_values)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.location_value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reporter_index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.reporter_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.bytes_value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.bytes_value);
        }
        if self.boolean_value != false {
            my_size += 2;
        }
        if self.number_value != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(13, self.number_value);
        }
        if !self.string_value.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.string_value);
        }
        if self.enum_value != 0 {
            my_size += ::protobuf::rt::value_size(15, self.enum_value, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.struct_values {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.location_value.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.reporter_index != 0 {
            os.write_uint32(1, self.reporter_index)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if !self.bytes_value.is_empty() {
            os.write_bytes(11, &self.bytes_value)?;
        }
        if self.boolean_value != false {
            os.write_bool(12, self.boolean_value)?;
        }
        if self.number_value != 0 {
            os.write_sint64(13, self.number_value)?;
        }
        if !self.string_value.is_empty() {
            os.write_string(14, &self.string_value)?;
        }
        if self.enum_value != 0 {
            os.write_uint32(15, self.enum_value)?;
        }
        for v in &self.struct_values {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.location_value.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyPage_ReportedValue {
        PropertyPage_ReportedValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "reporter_index",
                    |m: &PropertyPage_ReportedValue| { &m.reporter_index },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.reporter_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "timestamp",
                    |m: &PropertyPage_ReportedValue| { &m.timestamp },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.timestamp },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "bytes_value",
                    |m: &PropertyPage_ReportedValue| { &m.bytes_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.bytes_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "boolean_value",
                    |m: &PropertyPage_ReportedValue| { &m.boolean_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.boolean_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "number_value",
                    |m: &PropertyPage_ReportedValue| { &m.number_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.number_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "string_value",
                    |m: &PropertyPage_ReportedValue| { &m.string_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.string_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "enum_value",
                    |m: &PropertyPage_ReportedValue| { &m.enum_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.enum_value },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyValue>>(
                    "struct_values",
                    |m: &PropertyPage_ReportedValue| { &m.struct_values },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.struct_values },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Location>>(
                    "location_value",
                    |m: &PropertyPage_ReportedValue| { &m.location_value },
                    |m: &mut PropertyPage_ReportedValue| { &mut m.location_value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyPage_ReportedValue>(
                    "PropertyPage_ReportedValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertyPage_ReportedValue {
        static mut instance: ::protobuf::lazy::Lazy<PropertyPage_ReportedValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyPage_ReportedValue,
        };
        unsafe {
            instance.get(PropertyPage_ReportedValue::new)
        }
    }
}

impl ::protobuf::Clear for PropertyPage_ReportedValue {
    fn clear(&mut self) {
        self.clear_reporter_index();
        self.clear_timestamp();
        self.clear_bytes_value();
        self.clear_boolean_value();
        self.clear_number_value();
        self.clear_string_value();
        self.clear_enum_value();
        self.clear_struct_values();
        self.clear_location_value();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyPage_ReportedValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyPage_ReportedValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PropertyPageContainer {
    // message fields
    pub entries: ::protobuf::RepeatedField<PropertyPage>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl PropertyPageContainer {
    pub fn new() -> PropertyPageContainer {
        ::std::default::Default::default()
    }

    // repeated .PropertyPage entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<PropertyPage>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<PropertyPage> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<PropertyPage> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[PropertyPage] {
        &self.entries
    }
}

impl ::protobuf::Message for PropertyPageContainer {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PropertyPageContainer {
        PropertyPageContainer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PropertyPage>>(
                    "entries",
                    |m: &PropertyPageContainer| { &m.entries },
                    |m: &mut PropertyPageContainer| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PropertyPageContainer>(
                    "PropertyPageContainer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PropertyPageContainer {
        static mut instance: ::protobuf::lazy::Lazy<PropertyPageContainer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PropertyPageContainer,
        };
        unsafe {
            instance.get(PropertyPageContainer::new)
        }
    }
}

impl ::protobuf::Clear for PropertyPageContainer {
    fn clear(&mut self) {
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PropertyPageContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PropertyPageContainer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Location {
    // message fields
    pub latitude: i64,
    pub longitude: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Location {
    pub fn new() -> Location {
        ::std::default::Default::default()
    }

    // sint64 latitude = 1;

    pub fn clear_latitude(&mut self) {
        self.latitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_latitude(&mut self, v: i64) {
        self.latitude = v;
    }

    pub fn get_latitude(&self) -> i64 {
        self.latitude
    }

    // sint64 longitude = 2;

    pub fn clear_longitude(&mut self) {
        self.longitude = 0;
    }

    // Param is passed by value, moved
    pub fn set_longitude(&mut self, v: i64) {
        self.longitude = v;
    }

    pub fn get_longitude(&self) -> i64 {
        self.longitude
    }
}

impl ::protobuf::Message for Location {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.latitude = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.longitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, self.latitude);
        }
        if self.longitude != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, self.longitude);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.latitude != 0 {
            os.write_sint64(1, self.latitude)?;
        }
        if self.longitude != 0 {
            os.write_sint64(2, self.longitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Location {
        Location::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "latitude",
                    |m: &Location| { &m.latitude },
                    |m: &mut Location| { &mut m.latitude },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "longitude",
                    |m: &Location| { &m.longitude },
                    |m: &mut Location| { &mut m.longitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Location>(
                    "Location",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Location {
        static mut instance: ::protobuf::lazy::Lazy<Location> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Location,
        };
        unsafe {
            instance.get(Location::new)
        }
    }
}

impl ::protobuf::Clear for Location {
    fn clear(&mut self) {
        self.clear_latitude();
        self.clear_longitude();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Location {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Location {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0eproperty.proto\"\xf6\x03\n\x08Property\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x12\x1b\n\trecord_id\x18\x02\x20\x01(\tR\x08recordI\
    d\x125\n\tdata_type\x18\x03\x20\x01(\x0e2\x18.PropertySchema.DataTypeR\
    \x08dataType\x120\n\treporters\x18\x04\x20\x03(\x0b2\x12.Property.Report\
    erR\treporters\x12!\n\x0ccurrent_page\x18\x05\x20\x01(\rR\x0bcurrentPage\
    \x12\x18\n\x07wrapped\x18\x06\x20\x01(\x08R\x07wrapped\x12\x14\n\x05fixe\
    d\x18\t\x20\x01(\x08R\x05fixed\x12'\n\x0fnumber_exponent\x18\n\x20\x01(\
    \x11R\x0enumberExponent\x12!\n\x0cenum_options\x18\x0b\x20\x03(\tR\x0ben\
    umOptions\x12<\n\x11struct_properties\x18\x0c\x20\x03(\x0b2\x0f.Property\
    SchemaR\x10structProperties\x12\x12\n\x04unit\x18\x14\x20\x01(\tR\x04uni\
    t\x1a_\n\x08Reporter\x12\x1d\n\npublic_key\x18\x01\x20\x01(\tR\tpublicKe\
    y\x12\x1e\n\nauthorized\x18\x02\x20\x01(\x08R\nauthorized\x12\x14\n\x05i\
    ndex\x18\x03\x20\x01(\rR\x05index\"8\n\x11PropertyContainer\x12#\n\x07en\
    tries\x18\x01\x20\x03(\x0b2\t.PropertyR\x07entries\"\xb5\x03\n\x0eProper\
    tySchema\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x125\n\tdata_type\
    \x18\x02\x20\x01(\x0e2\x18.PropertySchema.DataTypeR\x08dataType\x12\x1a\
    \n\x08required\x18\x03\x20\x01(\x08R\x08required\x12\x14\n\x05fixed\x18\
    \x04\x20\x01(\x08R\x05fixed\x12\x18\n\x07delayed\x18\x05\x20\x01(\x08R\
    \x07delayed\x12'\n\x0fnumber_exponent\x18\n\x20\x01(\x11R\x0enumberExpon\
    ent\x12!\n\x0cenum_options\x18\x0b\x20\x03(\tR\x0benumOptions\x12<\n\x11\
    struct_properties\x18\x0c\x20\x03(\x0b2\x0f.PropertySchemaR\x10structPro\
    perties\x12\x12\n\x04unit\x18\x14\x20\x01(\tR\x04unit\"n\n\x08DataType\
    \x12\x0e\n\nTYPE_UNSET\x10\0\x12\t\n\x05BYTES\x10\x01\x12\x0b\n\x07BOOLE\
    AN\x10\x02\x12\n\n\x06NUMBER\x10\x03\x12\n\n\x06STRING\x10\x04\x12\x08\n\
    \x04ENUM\x10\x05\x12\n\n\x06STRUCT\x10\x06\x12\x0c\n\x08LOCATION\x10\x07\
    \"\xec\x02\n\rPropertyValue\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    e\x125\n\tdata_type\x18\x02\x20\x01(\x0e2\x18.PropertySchema.DataTypeR\
    \x08dataType\x12\x1f\n\x0bbytes_value\x18\x0b\x20\x01(\x0cR\nbytesValue\
    \x12#\n\rboolean_value\x18\x0c\x20\x01(\x08R\x0cbooleanValue\x12!\n\x0cn\
    umber_value\x18\r\x20\x01(\x12R\x0bnumberValue\x12!\n\x0cstring_value\
    \x18\x0e\x20\x01(\tR\x0bstringValue\x12\x1d\n\nenum_value\x18\x0f\x20\
    \x01(\tR\tenumValue\x123\n\rstruct_values\x18\x10\x20\x03(\x0b2\x0e.Prop\
    ertyValueR\x0cstructValues\x120\n\x0elocation_value\x18\x11\x20\x01(\x0b\
    2\t.LocationR\rlocationValue\"\xee\x03\n\x0cPropertyPage\x12\x12\n\x04na\
    me\x18\x01\x20\x01(\tR\x04name\x12\x1b\n\trecord_id\x18\x02\x20\x01(\tR\
    \x08recordId\x12D\n\x0freported_values\x18\x03\x20\x03(\x0b2\x1b.Propert\
    yPage.ReportedValueR\x0ereportedValues\x1a\xe6\x02\n\rReportedValue\x12%\
    \n\x0ereporter_index\x18\x01\x20\x01(\rR\rreporterIndex\x12\x1c\n\ttimes\
    tamp\x18\x02\x20\x01(\x04R\ttimestamp\x12\x1f\n\x0bbytes_value\x18\x0b\
    \x20\x01(\x0cR\nbytesValue\x12#\n\rboolean_value\x18\x0c\x20\x01(\x08R\
    \x0cbooleanValue\x12!\n\x0cnumber_value\x18\r\x20\x01(\x12R\x0bnumberVal\
    ue\x12!\n\x0cstring_value\x18\x0e\x20\x01(\tR\x0bstringValue\x12\x1d\n\n\
    enum_value\x18\x0f\x20\x01(\rR\tenumValue\x123\n\rstruct_values\x18\x10\
    \x20\x03(\x0b2\x0e.PropertyValueR\x0cstructValues\x120\n\x0elocation_val\
    ue\x18\x11\x20\x01(\x0b2\t.LocationR\rlocationValue\"@\n\x15PropertyPage\
    Container\x12'\n\x07entries\x18\x01\x20\x03(\x0b2\r.PropertyPageR\x07ent\
    ries\"D\n\x08Location\x12\x1a\n\x08latitude\x18\x01\x20\x01(\x12R\x08lat\
    itude\x12\x1c\n\tlongitude\x18\x02\x20\x01(\x12R\tlongitudeb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
